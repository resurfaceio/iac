{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Installs Graylog API Security Helm chart on a given EKS cluster. Installation details are stored in an S3-hosted static website.",
  "Parameters": {
    "EKSClusterName": {
      "Type" : "String",
      "Description" : "Enter a name for your EKS cluster. Required."
    },
    "VPC": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Select the VPC where your EKS cluster is located. Required."
    },
    "VPCSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Select a Subnet from in your selected VPC. Required."
    },
    "S3BucketName": {
      "Type": "String",
      "Description": "Enter a name for the bucket to host static page with installation results."
    }
  },
  "Resources": {
    "OutputBucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "BucketName" : { "Ref": "S3BucketName" },
        "PublicAccessBlockConfiguration": {
          "BlockPublicAcls": false,
          "BlockPublicPolicy": false,
          "IgnorePublicAcls": false,
          "RestrictPublicBuckets": false
        },
        "WebsiteConfiguration": {
          "ErrorDocument": "404.html",
          "IndexDocument": "index.html"
        },
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ]
      }
    },
    "BucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": { "Ref": "OutputBucket" },
        "PolicyDocument": {
          "Id": "PublicS3WebsitePolicy",
          "Version": "2012-10-17",
          "Statement": [ {
            "Sid": "PublicReadForGetBucketObjects",
            "Effect": "Allow",
            "Principal": "*",
            "Action": "s3:GetObject",
            "Resource": {
                "Fn::Join": [ "", [ "arn:aws:s3:::", { "Ref": "OutputBucket" }, "/*" ] ]
            }
          } ]
        }
      }
    },
    "HelmInstallerRole": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
        "AssumeRolePolicyDocument" :  {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                  "Service": [
                      "ec2.amazonaws.com"
                  ]
              },
              "Action": [
                  "sts:AssumeRole"
              ]
            }
          ]
        },
        "Description" :"IAM Role for EC2 instance to install Helm chart for EKS cluster", 
        "Policies" : [ {
          "PolicyName": "root",
          "PolicyDocument": {
            "Version": "2012-10-17",
            "Statement": [ {
              "Sid": "IamListClustersCreateBuckets",
              "Effect": "Allow",
              "Action": [
                "eks:ListClusters",
                "eks:DescribeCluster",
                "eks:DeleteAccessEntry",
                "s3:PutObject"
              ],
              "Resource": "*"
            } ]
          }
        } ],
        "RoleName" : "CFHelmInstallerRole",
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ]
      }
    },
    "HelmInstallerAccessEntry": {
      "Type" : "AWS::EKS::AccessEntry",
      "Properties" : {
        "AccessPolicies" : [ {
          "AccessScope" : {
            "Type": "cluster"
          },
          "PolicyArn" : "arn:aws:eks::aws:cluster-access-policy/AmazonEKSClusterAdminPolicy"
        } ],
        "ClusterName" : { "Ref": "EKSClusterName" },
        "PrincipalArn" : { "Fn::GetAtt": ["HelmInstallerRole", "Arn"] },
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ]
      }
    },
    "HelmInstallerSG": {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Security Group for chart installer instance",
        "GroupName" : { "Fn::Join": ["-", [{ "Ref": "AWS::StackId" }, "sg"]] },
        "SecurityGroupEgress" : [
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Allows outbound HTTP traffic",
            "FromPort" : 80,
            "ToPort" : 80,
            "IpProtocol" : "tcp"
          },
          {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Allows outbound HTTPS traffic",
            "FromPort" : 443,
            "ToPort" : 443,
            "IpProtocol" : "tcp"
          }
        ],
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ],
        "VpcId" : { "Ref": "VPC" }
      }
    },
    "HelmInstallerInstanceProfile": {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
        "Roles" : [ { "Ref": "HelmInstallerRole" } ]
      }
    },
    "HelmInstaller": {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "InstanceInitiatedShutdownBehavior" : "terminate",
        "IamInstanceProfile": { "Ref" : "HelmInstallerInstanceProfile" },
        "ImageId" : "ami-0e0c22b1ff6ba8221",
        "InstanceType" : "t2.micro",
        "NetworkInterfaces" : [ {
          "SubnetId": {"Ref": "VPCSubnet"},
          "AssociatePublicIpAddress": "true",
          "DeviceIndex": "0",
          "GroupSet": [{ "Ref" : "HelmInstallerSG" }]
        } ],
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ],
        "UserData" : {
          "Fn::Base64": {
            "Fn::Join": ["\n", [
              "#!/bin/bash",
              "#set -x",
              "set -e",
              "echo \"<html xmlns=http://www.w3.org/1999/xhtml><head><title>Graylog API Security | Error</title></head><body><h1>Uh oh</h1><p>Something went wrong with your installation, please <a href=mailto:api-support@graylog.com>contact support</a> for more information.</p></body></html>\" > install-error.html",
              { "Fn::Sub": [ "on_error() { aws s3 cp install-error.html s3://${bucket}/index.html ; }", { "bucket": { "Ref": "OutputBucket" } } ] },
              "trap 'on_error' ERR",
              "curl -LO \"https://raw.githubusercontent.com/resurfaceio/templates/master/aws/eks/html/index.html\"",
              "curl -LO \"https://raw.githubusercontent.com/resurfaceio/templates/master/aws/eks/html/404.html\"",
              "curl -LO \"https://raw.githubusercontent.com/resurfaceio/templates/master/aws/eks/html/install-error.html\"",
              "curl -LO \"https://raw.githubusercontent.com/resurfaceio/templates/master/aws/eks/html/install-in-progress.html\"",
              { "Fn::Sub": [ "aws s3 cp install-in-progress.html s3://${bucket}/index.html", { "bucket": { "Ref": "OutputBucket" } } ] },
              { "Fn::Sub": [ "aws eks update-kubeconfig --name ${cluster}", { "cluster": { "Ref": "EKSClusterName" } } ] },
              "export KUBECONFIG=/root/.kube/config",
              "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"",
              "install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl",
              "kubectl get nodes",
              "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3",
              "chmod 700 get_helm.sh",
              "source get_helm.sh",
              "helm repo add resurfaceio https://resurfaceio.github.io/containers",
              "helm repo add jetstack https://charts.jetstack.io",
              "helm repo update",
              "helm install cert-manager jetstack/cert-manager --create-namespace --namespace resurface --version v1.14.4 --set installCRDs=true --set prometheus.enabled=false",
              "helm install resurface resurfaceio/resurface --namespace resurface --set provider=aws --set custom.config.pollingcycle=fast --set kubernetes-ingress.controller.extraArgs[0]=\"--disable-quic\" --set kubernetes-ingress.controller.service.enablePorts.quic=false --set iceberg.enabled=true --set minio.enabled=true --set minio.rootUser=minio --set minio.rootPassword=minio123 --set minio.persistence.size=100Gi --set ingress.minio.expose=true > notes.txt",
              "timeout 5m bash -c 'until kubectl get svc resurface-kubernetes-ingress --namespace resurface --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\"; do sleep 10; done'",
              "export DB_HOST=$(kubectl get svc resurface-kubernetes-ingress --namespace resurface --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")",
              "export DB_HOSTNAME=$(echo $DB_HOST | sed 's/:.*//')",
              { "Fn::Sub": [ "sed -i \"s|_cluster_|${cluster}|g\" index.html", { "cluster": { "Ref": "EKSClusterName" } } ] },
              "sed -i \"s|_url_|http://$DB_HOST/ui|g\" index.html",
              "sed -i \"s|_captureurl_|http://$DB_HOST/fluke/message|g\" index.html",
              "sed -i \"s|_miniourl_|http://$DB_HOSTNAME:9001/|g\" index.html",
              "sed -i -e \"/_notes_/ r notes.txt\" -e \"/_notes_/ d\" index.html",
              "sed -i -e \"/_kubeconfig_/ r ${KUBECONFIG}\" -e \"/_kubeconfig_/ d\" index.html",
              "sed -i \"s|_url_|http://$DB_HOST/ui|g\" 404.html",
              { "Fn::Sub": [ "aws s3 cp index.html s3://${bucket}/index.html", { "bucket": { "Ref": "OutputBucket" } } ] },
              { "Fn::Sub": [ "aws s3 cp 404.html s3://${bucket}/404.html", { "bucket": { "Ref": "OutputBucket" } } ] },
              "yum update -y && yum install unzip -y && yum remove awscli -y",
              "curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"",
              "unzip -qq awscliv2.zip",
              "./aws/install > /dev/null",
              { "Fn::Sub": [ "/usr/local/bin/aws eks delete-access-entry --cluster-name ${cluster} --principal-arn ${principal}", { "cluster": { "Ref": "EKSClusterName" }, "principal": { "Fn::GetAtt": ["HelmInstallerRole", "Arn"] } } ] },
              "#shutdown -h +10 minutes",
              "shutdown -h now"
            ] ]
          }
        }
      }
    }
  },
  "Outputs": {
    "ClusterName": {
      "Description": "Name of your EKS cluster. Connect to it to run helm commands from your terminal using the aws cli: aws eks update-kubeconfig --name <ClusterName>",
      "Value": { "Ref": "EKSClusterName" }
    },
    "SuccessURL": {
      "Description": "Graylog API Security post-installation notes. They include the web UI access URL, DB capture URL, and kubeconfig file.",
      "Value": { "Fn::GetAtt": [ "OutputBucket", "WebsiteURL"] }
    }
  }
}
