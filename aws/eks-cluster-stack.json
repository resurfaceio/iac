{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys EKS cluster with VPC",
  "Parameters": {
    "EKSClusterName": {
      "Type" : "String",
      "Description" : "Enter a name for your EKS cluster. Required."
    },
    "EKSNodeCount": {
      "Type" : "Number",
      "Default" : "3",
      "Description" : "Enter the number of nodes for you EKS node group. Default is 3."
    },
    "EKSNodeCpuArch" :{
      "Type" : "String",
      "Default" : "arm64",
      "AllowedValues" : ["x86", "arm64"],
      "Description" : "Select the desired CPU architecture for the EKS nodes. Default is arm64.",
      "ConstraintDescription": "Supported architectures: \"x86\", \"arm64\". Please enter a valid architecture type."
    },
    "KubernetesVersion": {
      "Type" : "String",
      "Default" : "1.29",
      "AllowedValues" : ["1.27", "1.28", "1.29"],
      "Description" : "Select the Kubernetes version for your cluster. Default is 1.29.",
      "ConstraintDescription": "Supported versions: \"1.27\", \"1.28\", \"1.29\". Please enter a valid version."
    },
    "VPCAddressBlock": {
      "Type": "String",
      "Default": "10.10.0.0/16",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "Description": "Enter a CIDR block for the new VPC. Default is 10.10.0.0/16",
      "ConstraintDescription": "Must be a valid CIDR of the form x.x.x.x/x"
    },
    "VPCSubnetCIDRBlocks": {
      "Type": "CommaDelimitedList",
      "Default": "10.10.0.0/20, 10.10.16.0/20, 10.10.32.0/20",
      "Description": "Comma-delimited list of three CIDR blocks for Subnets. Must belong within VPC CIDR block. Defaults to [10.10.0.0/20, 10.10.16.0/20, 10.10.32.0/20]"
    },
    "VPCSubnetZone1": {
      "Type" : "AWS::EC2::AvailabilityZone::Name",
      "Description" : "Select an availability zone for Subnet 1. Required."
    },
    "VPCSubnetZone2": {
      "Type" : "AWS::EC2::AvailabilityZone::Name",
      "Description" : "Select an availability zone for Subnet 2. Required."
    },
    "VPCSubnetZone3": {
      "Type" : "AWS::EC2::AvailabilityZone::Name",
      "Description" : "Select an availability zone for Subnet 3. Required."
    },
    "TempHelmInstallerAMI": {
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
      "Default": "/aws/service/ami-amazon-linux-latest/al2023-ami-minimal-kernel-default-x86_64",
      "Description": "AL2023 AMI lookup path for temporary EC2 instance to install helm chart."
    }
  },
  "Conditions": {
    "UseARM": { "Fn::Equals": [ "arm64", { "Ref": "EKSNodeCpuArch" } ] }
  },
  "Resources": {
    "EKSClusterRole": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" : {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                    "Service": [
                        "eks.amazonaws.com"
                    ]
                },
                "Action": [
                    "sts:AssumeRole"
                ]
              }
            ]
          },
          "Description" : "IAM Role for EKS cluster",
          "ManagedPolicyArns" : [ 
            "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
            "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
            "arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy",
            "arn:aws:iam::aws:policy/AmazonEKSLocalOutpostClusterPolicy",
            "arn:aws:iam::aws:policy/AmazonEKSServicePolicy",
            "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
            "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          ],
          "RoleName" : "CFEKSClusterRole",
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ]
        }
    },
    "EKSNodeRole": {
      "Type" : "AWS::IAM::Role",
      "Properties" : {
          "AssumeRolePolicyDocument" :  {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                    "Service": [
                        "ec2.amazonaws.com"
                    ]
                },
                "Action": [
                    "sts:AssumeRole"
                ]
              }
            ]
          },
          "Description" :"IAM Role for EKS Node group",
          "ManagedPolicyArns" : [ 
            "arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy",
            "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly",
            "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy",
            "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
          ],
          "RoleName" : "CFEKSNodeRole",
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ]
        }
    },
    "VPC": {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
          "CidrBlock" : {"Ref": "VPCAddressBlock"},
          "EnableDnsHostnames" : true,

          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ]
        }
    },
    "Subnet1": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : {"Ref": "VPCSubnetZone1"},
        "CidrBlock" : { "Fn::Select" : [ "0", {"Ref" : "VPCSubnetCIDRBlocks"} ] },
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch": {
          "EnableResourceNameDnsAAAARecord" : false,
          "EnableResourceNameDnsARecord" : false,
          "HostnameType" : "ip-name"
        },
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "Subnet2": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
          "AvailabilityZone" : {"Ref": "VPCSubnetZone2"},
          "CidrBlock" : { "Fn::Select" : [ "1", {"Ref" : "VPCSubnetCIDRBlocks"} ] },
          "MapPublicIpOnLaunch" : true,
          "PrivateDnsNameOptionsOnLaunch": {
            "EnableResourceNameDnsAAAARecord" : false,
            "EnableResourceNameDnsARecord" : false,
            "HostnameType" : "ip-name"
          },          
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ],
          "VpcId" : { "Ref" : "VPC" }
        }
    },
    "Subnet3": {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "AvailabilityZone" : {"Ref": "VPCSubnetZone3"},
        "CidrBlock" : { "Fn::Select" : [ "2", {"Ref" : "VPCSubnetCIDRBlocks"} ] },
        "MapPublicIpOnLaunch" : true,
        "PrivateDnsNameOptionsOnLaunch": {
          "EnableResourceNameDnsAAAARecord" : false,
          "EnableResourceNameDnsARecord" : false,
          "HostnameType" : "ip-name"
        },
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ],
        "VpcId" : { "Ref" : "VPC" }
      }
    },
    "InternetGateway": {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ]
        }
    },
    "GatewayAttachment": {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
          "InternetGatewayId" : { "Ref": "InternetGateway"},
          "VpcId" : { "Ref": "VPC" }
        }
    },
    "RouteTable": {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ],
          "VpcId" : { "Ref" : "VPC" }
        }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "GatewayAttachment",
      "Properties": {
        "RouteTableId": { "Ref": "RouteTable" },
        "GatewayId": { "Ref":  "InternetGateway" },
        "DestinationCidrBlock": "0.0.0.0/0"
      }
    },
    "RouteTableAssociation1": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
          "RouteTableId" : { "Ref" : "RouteTable" },
          "SubnetId" : { "Ref" : "Subnet1" }
        }
    },
    "RouteTableAssociation2": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "SubnetId" : { "Ref" : "Subnet2" }
      }
    },
    "RouteTableAssociation3": {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteTable" },
        "SubnetId" : { "Ref" : "Subnet3" }
      }
    },
    "Cluster": {
      "Type" : "AWS::EKS::Cluster",
      "Properties" : {
          "AccessConfig" : {
            "AuthenticationMode" : "API_AND_CONFIG_MAP"
          }
          ,
          "Name" : { "Ref": "EKSClusterName" },
          "ResourcesVpcConfig" : {
            "EndpointPrivateAccess" : false,
            "EndpointPublicAccess" : true,
            "SubnetIds" : [ { "Ref" : "Subnet1" }, { "Ref" : "Subnet2" }, { "Ref" : "Subnet3" }]
          }
          ,
          "RoleArn" : {"Fn::GetAtt" : ["EKSClusterRole", "Arn"] },
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ],
          "Version" : { "Ref": "KubernetesVersion" }
        }
    },
    "Nodes": {
      "Type" : "AWS::EKS::Nodegroup",
      "DependsOn": [ "Cluster" ],
      "Properties" : {
          "ClusterName" : { "Ref": "EKSClusterName" },
          "DiskSize" : 20,
          "AmiType": { "Fn::If": [ "UseARM", "AL2_ARM_64", "AL2_x86_64" ] },
          "InstanceTypes" : [ { "Fn::If": [ "UseARM", "m7g.2xlarge", "m7i.2xlarge" ] } ],
          "NodegroupName" : { "Fn::Join": ["-", [ { "Ref": "EKSClusterName" }, "nodes" ]] },
          "NodeRole" : {"Fn::GetAtt" : ["EKSNodeRole", "Arn"] },
          "ScalingConfig" : {
            "DesiredSize" : { "Ref": "EKSNodeCount" },
            "MaxSize" : { "Ref": "EKSNodeCount" },
            "MinSize" : 0
          }
          ,
          "Subnets" : [ { "Ref" : "Subnet1" }, { "Ref" : "Subnet2" }, { "Ref" : "Subnet3" }]
        }
    },
    "VpcCni": {
      "Type" : "AWS::EKS::Addon",
      "DependsOn": [ "Cluster", "Nodes" ],
      "Properties" : {
          "AddonName" : "vpc-cni",
          "AddonVersion" : "v1.16.0-eksbuild.1",
          "ClusterName" : { "Ref": "EKSClusterName" },
          "PreserveOnDelete" : false,
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ]
        }
    },
    "CoreDNS": {
      "Type" : "AWS::EKS::Addon",
      "DependsOn": [ "Cluster", "Nodes" ],
      "Properties" : {
        "AddonName" : "coredns",
        "AddonVersion" : "v1.11.1-eksbuild.4",
        "ClusterName" : { "Ref": "EKSClusterName" },
        "PreserveOnDelete" : false,
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ]
      }
    },
    "EbsCsi": {
      "Type" : "AWS::EKS::Addon",
      "DependsOn": [ "Cluster", "Nodes" ],
      "Properties" : {
        "AddonName" : "aws-ebs-csi-driver",
        "AddonVersion" : "v1.28.0-eksbuild.1",
        "ClusterName" : { "Ref": "EKSClusterName" },
        "PreserveOnDelete" : false,
        "Tags" : [ {
          "Key": "Demo",
          "Value": "Graylog API Security"
        } ]
      }
    },
    "OutputBucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
          "BucketName" : { "Fn::Join": ["-", [{ "Ref": "AWS::StackName" }, "bucket"]] },
          "LifecycleConfiguration" : {
            "Rules": [ {
              "Id": "OneDayExpiry",
              "Status": "Enabled",
              "ExpirationInDays": 1
            } ]
          },
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ]         
        }
    },
    "HelmInstallerSG": {
      "Type" : "AWS::EC2::SecurityGroup",
      "DependsOn": [ "Cluster", "Nodes" ],
      "Properties" : {
          "GroupDescription" : "Security Group for chart installer instance",
          "GroupName" : { "Fn::Join": ["-", [{ "Ref": "AWS::StackId" }, "sg"]] },
          "SecurityGroupEgress" : [ {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Allows outbound traffic to all locations",
            "FromPort" : 22,
            "ToPort" : 9999,
            "IpProtocol" : "tcp"
          } ],
          "SecurityGroupIngress" : [ {
            "CidrIp" : "0.0.0.0/0",
            "Description" : "Allows inbound traffic from all locations",
            "FromPort" : 22,
            "ToPort" : 9999,
            "IpProtocol" : "tcp"
          } ],
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ],
          "VpcId" : { "Ref": "VPC" }
        }
    },
    "HelmInstallerInstanceProfile": {
      "Type" : "AWS::IAM::InstanceProfile",
      "Properties" : {
          "Roles" : [ { "Ref": "EKSNodeRole" } ]
        }
    },
    "HelmInstaller": {
      "Type" : "AWS::EC2::Instance",
      "DependsOn": [ "Cluster", "Nodes" ],
      "Properties" : {
          "InstanceInitiatedShutdownBehavior" : "terminate",
          "IamInstanceProfile": { "Ref" : "HelmInstallerInstanceProfile" },
          "ImageId" : { "Ref": "TempHelmInstallerAMI" },
          "InstanceType" : "t2.micro",
          "NetworkInterfaces" : [ {
            "SubnetId": {"Ref": "Subnet1"},
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "GroupSet": [{ "Ref" : "HelmInstallerSG" }]
          } ],
          "Tags" : [ {
            "Key": "Demo",
            "Value": "Graylog API Security"
          } ],
          "UserData" : {
            "Fn::Base64": {
              "Fn::Join": ["\n", [
                "#!/bin/bash",
                "set -x",
                "yum update -y",
                { "Fn::Sub": [ "aws eks update-kubeconfig --name ${cluster}", { "cluster": { "Ref": "EKSClusterName" } } ] },
                "export KUBECONFIG=/root/.kube/config",
                "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3",
                "chmod 700 get_helm.sh",
                "source get_helm.sh",
                "helm repo add resurfaceio https://resurfaceio.github.io/containers",
                "helm repo add jetstack https://charts.jetstack.io",
                "helm repo update",
                "helm install cert-manager jetstack/cert-manager --create-namespace --namespace resurface --version v1.14.4 --set installCRDs=true --set prometheus.enabled=false",
                "helm install resurface resurfaceio/resurface --namespace resurface --set provider=aws --set iceberg.enabled=true --set minio.enabled=true --set minio.rootUser=minio --set minio.rootPassword=minio123 --set minio.persistence.size=100Gi --set ingress.minio.expose=true > /tmp/notes.txt",
                "sleep 20",
                "echo http://$(kubectl get svc resurface-kubernetes-ingress --namespace resurface --template \"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}\")/ui/ > /tmp/url.txt",
                { "Fn::Sub": [ "aws s3 cp /root/.kube/config s3://$(bucket)/kubeconfig", { "bucket": { "Ref": "OutputBucket" } } ] },
                { "Fn::Sub": [ "aws s3 cp /tmp/notes.txt s3://$(bucket)/notes.txt", { "bucket": { "Ref": "OutputBucket" } } ] },
                { "Fn::Sub": [ "aws s3 cp /tmp/url.txt s3://<bucket>/url.txt", { "bucket": { "Ref": "OutputBucket" } } ] },
                "#shutdown -h now\n",
                "shutdown -h +10 minutes"
              ]]
            }
          }
        }
    }    
  },
  "Outputs": {
    "ClusterName": {
      "Description": "Name of your EKS cluster. Connect to it to run helm commands from your terminal, using the aws cli: aws eks update-kubeconfig --name <Cluster name>",
      "Value": { "Ref": "EKSClusterName" }
    },
    "OutputBucketName": {
      "Description": "Name of the S3 bucket containing cluster info",
      "Value": { "Ref": "OutputBucket" }
    },
    "OutputBucketDomainName": {
      "Description": "Domain name of the S3 bucket containing cluster info",
      "Value": { "Fn::GetAtt": [ "OutputBucket", "DomainName"] }
    },
    "LBHostname": {
      "Description": "Information about the value",
      "Value": "Value to return"
    },
    "HelmNotes": {
      "Description": "Information about the value",
      "Value": "Value to return"
    },
    "Kubeconfig": {
      "Description": "Information about the value",
      "Value": "Value to return"
    },
    "URL": {
      "Description": "Information about the value",
      "Value": "Value to return"
    },
    "CaptureURL": {
      "Description": "Information about the value",
      "Value": "Value to return"
    }
  }
}